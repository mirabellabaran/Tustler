#nullable enable

using CloudWeaver;
using CloudWeaver.AWS;
using CloudWeaver.Types;
using System;
using System.Buffers;
using System.Collections;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using Tustler.Helpers;
using Tustler.Helpers.UIServices;
using Tustler.Models;
using Tustler.UserControls.TaskMemberControls;
using TustlerAWSLib;
using TustlerFSharpPlatform;
using TustlerInterfaces;
using TustlerModels;
using TustlerServicesLib;
using AWSMiniTasks = CloudWeaver.AWS.MiniTasks;
using AWSTasks = CloudWeaver.AWS.Tasks;

namespace Tustler.UserControls
{
    /// <summary>
    /// Interaction logic for Tasks.xaml
    /// </summary>
    public partial class TasksManager : UserControl, IOwnerType
    {
        private enum RunMode
        {
            Init,
            Running,
            Stopped
        }

        private const string EventStackArgumentRestoreName = "defaultargs.json";

        private RunMode runMode;

        private readonly NotificationsList notificationsList;
        private readonly AmazonWebServiceInterface awsInterface;
        //private readonly TaskLogger taskLogger;

        private readonly Dictionary<string, TaskFunctionSpecifier> taskFunctionLookup;
        private readonly Queue<TaskFunctionSpecifier> taskQueue;

        private readonly Agent agent;                                           // the executor that manages Task Function execution
        private readonly ObservableCollection<ResponseWrapper> taskResponses;   // the sequence of UI responses generated by a call to a Task Function; bound to the UI

        public static readonly DependencyProperty TaskSpecifierProperty = DependencyProperty.Register("TaskSpecifier", typeof(TaskFunctionSpecifier), typeof(TasksManager), new PropertyMetadata(null, PropertyChangedCallback));

        private static void PropertyChangedCallback(DependencyObject dependencyObject, DependencyPropertyChangedEventArgs dependencyPropertyChangedEventArgs)
        {
            if (dependencyObject is TasksManager ctrl)
            {
                if (dependencyPropertyChangedEventArgs.NewValue != null)
                {
                    var taskSpecifier = dependencyPropertyChangedEventArgs.NewValue as TaskFunctionSpecifier;
                    ctrl.TaskFunction = taskSpecifier?.TaskName switch
                    {
                        "MinimalFunction" => AWSTasks.MinimalFunction,

                        "S3FetchItems" => AWSTasks.S3FetchItems,

                        "Cleanup" => AWSTasks.Cleanup,
                        "CleanTranscriptionJobHistory" => AWSTasks.CleanTranscriptionJobHistory,
                        "SomeSubTask" => AWSTasks.SomeSubTask,

                        "TranscribeAudio" => AWSTasks.TranscribeAudio,
                        "UploadMediaFile" => AWSTasks.UploadMediaFile,
                        "StartTranscription" => AWSTasks.StartTranscription,
                        "MonitorTranscription" => AWSTasks.MonitorTranscription,
                        "DownloadTranscriptFile" => AWSTasks.DownloadTranscriptFile,
                        "ExtractTranscript" => AWSTasks.ExtractTranscript,
                        "SaveTranscript" => AWSTasks.SaveTranscript,

                        "CreateSubTitles" => AWSTasks.CreateSubTitles,

                        "MultiLanguageTranslateText" => AWSTasks.MultiLanguageTranslateText,
                        "TranslateText" => AWSTasks.TranslateText,
                        "SaveTranslation" => AWSTasks.SaveTranslation,

                        "ConvertJsonLogToLogFormat" => AWSTasks.ConvertJsonLogToLogFormat,
                        "ConvertLogFormatToJsonLog" => AWSTasks.ConvertLogFormatToJsonLog,

                        "SelectTask" => AWSTasks.SelectTask,

                        _ => throw new ArgumentException($"Unknown task name '{taskSpecifier?.TaskName}'"),
                    };
                }
            }
        }

        public TaskFunctionSpecifier TaskSpecifier
        {
            get { return (TaskFunctionSpecifier)GetValue(TaskSpecifierProperty); }
            set { SetValue(TaskSpecifierProperty, value); }
        }

        public Func<TaskFunctionQueryMode, InfiniteList<MaybeResponse>, IEnumerable<TaskResponse>> TaskFunction
        {
            get;
            internal set;
        }

        public IEnumerable<TaskFunctionSpecifier> TaskFunctions
        {
            get
            {
                return taskFunctionLookup.Values;
            }
        }

        public TasksManager(TaskFunctionSpecifier[] taskFunctions, AmazonWebServiceInterface awsInterface, TaskLogger logger, TaskFunctionSpecifier rootSpecifier)
        {
            InitializeComponent();


            this.taskFunctionLookup = new Dictionary<string, TaskFunctionSpecifier>(taskFunctions.Select(tfs => new KeyValuePair<string, TaskFunctionSpecifier>(tfs.TaskFullPath, tfs)));
            this.taskQueue = new Queue<TaskFunctionSpecifier>();

            if (awsInterface is null) throw new ArgumentNullException(nameof(awsInterface));
            if (logger is null) throw new ArgumentNullException(nameof(logger));

            this.awsInterface = awsInterface;
            //this.taskLogger = logger;
            this.notificationsList = new NotificationsList();

            this.TaskFunction = AWSTasks.MinimalFunction;
            this.TaskSpecifier = rootSpecifier;
            //this.taskLogger.StartLogging(this.TaskSpecifier);

            this.taskResponses = new ObservableCollection<ResponseWrapper>();

            KnownArgumentsCollection knownArguments = new KnownArgumentsCollection();
            knownArguments.AddModule(new StandardKnownArguments(notificationsList));
            knownArguments.AddModule(new AWSKnownArguments(awsInterface));

            agent = new Agent(knownArguments, rootSpecifier, logger, false);

            agent.NewUIResponse += Agent_NewUIResponse;
            agent.SaveEvents += Agent_SaveEvents;
            agent.CallTask += Agent_CallTask;
            agent.ConvertToJson += Agent_ConvertToJson;
            agent.ConvertToBinary += Agent_ConvertToBinary;
            agent.Error += Agent_Error;
        }

        private void UserControl_Loaded(object sender, RoutedEventArgs e)
        {
            ShowGlobalMessage("Parameter set", $"Task name set to {TaskSpecifier.TaskName}");

            //var taskFolderPath = Path.Combine(TustlerServicesLib.ApplicationSettings.FileCachePath, this.TaskSpecifier.TaskName);
            //rbRunLog.IsEnabled = Directory.Exists(taskFolderPath) && Directory.EnumerateFiles(taskFolderPath, "*-log.bin", SearchOption.TopDirectoryOnly).Any();

            rbRunLog.IsEnabled = this.TaskSpecifier.IsLoggingEnabled;
        }

        private void LogFiles_DropDownOpened(object sender, EventArgs e)
        {
            if (lbLogFiles.Items.Count == 0)
            {
                // check for log files
                var loggedTaskName = agent.RootTask.TaskName;
                var taskFolderPath = Path.Combine(TustlerServicesLib.ApplicationSettings.FileCachePath, loggedTaskName);
                if (Directory.Exists(taskFolderPath))
                {
                    static string CreateDescription(string filePath)
                    {
                        var fileName = Path.GetFileNameWithoutExtension(new ReadOnlySpan<char>(filePath.ToCharArray()));
                        var endIndex = fileName.LastIndexOf('-');
                        if ((endIndex > 0) && (long.TryParse(fileName.Slice(0, endIndex), out long ticks)))
                        {
                            var dt = new DateTime(ticks);
                            return dt.ToString("dddd, MMM dd hh:mm", System.Globalization.CultureInfo.InvariantCulture);
                        }
                        else
                        {
                            return fileName.ToString();
                        }
                    }

                    var filePaths = Directory.EnumerateFiles(taskFolderPath, "*-log.bin", SearchOption.TopDirectoryOnly);
                    var listData = filePaths.Select(filePath => new LogFile { FilePath = filePath, TaskName = loggedTaskName, Description = CreateDescription(filePath) });
                    lbLogFiles.ItemsSource = listData;
                }
                else
                {
                    lbLogFiles.Items.Clear();
                }
            }
        }

        private void ShowGlobalMessage(string message, string detail)
        {
            var notifications = this.FindResource("applicationNotifications") as NotificationsList;
            notifications?.ShowMessage(message, detail);
        }

        private void ShowGlobalError(Notification errorInfo)
        {
            var notifications = this.FindResource("applicationNotifications") as NotificationsList;
            notifications?.Add(errorInfo);
        }

        /// <summary>
        /// Serialize all events (or just all SetArgument events) on the event stack for later restore
        /// </summary>
        private void SaveArgumentsAsJSON(TaskEvent[] events)
        {
            var taskFolderPath = Path.Combine(TustlerServicesLib.ApplicationSettings.FileCachePath, this.TaskSpecifier.TaskName);
            if (!Directory.Exists(taskFolderPath))
            {
                Directory.CreateDirectory(taskFolderPath);
            }

            var newData = Serialization.SerializeEventsAsJSON(events);

            // compare current version (if any)
            var serializedDataPath = Path.Combine(taskFolderPath, EventStackArgumentRestoreName);
            if (File.Exists(serializedDataPath))
            {
                var oldData = File.ReadAllBytes(serializedDataPath);

                bool unchanged = (oldData.Length == newData.Length) && (oldData.Zip(newData).All(item => item.First == item.Second));

                if (!unchanged)
                    File.WriteAllBytes(serializedDataPath, newData);
            }
            else
            {
                File.WriteAllBytes(serializedDataPath, newData);
            }
        }

        //private void LogEvents()
        //{
        //    var unloggedEvents = agent.SerializeUnloggedEventsAsBytes();

        //    var data = EventLoggingUtilities.BlockArrayToByteArray(unloggedEvents);
        //    this.taskLogger.AddToLog(data);
        //}

        //private async Task LogEventsAsync()
        //{
        //    await Dispatcher.InvokeAsync(() =>
        //    {
        //        LogEvents();
        //    });
        //}

        //private async Task LogEventsAndCloseAsync()
        //{
        //    await Dispatcher.InvokeAsync(() =>
        //    {
        //        LogEvents();
        //        this.taskLogger.StopLogging();
        //    });
        //}

        private void UnLogEvents(string logFilePath)
        {
            var data = File.ReadAllBytes(logFilePath);
            var blocks = EventLoggingUtilities.ByteArrayToBlockArray(data);
            var loggedEvents = Serialization.DeserializeEventsFromBytes(blocks);
            agent.ContinueWith(loggedEvents);
        }

        private void StartTask_CanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            var isNewRunMode = rbNewTaskRun.IsChecked.HasValue && rbNewTaskRun.IsChecked.Value;
            var isRunLogMode = (rbRunLog.IsChecked.HasValue && rbRunLog.IsChecked.Value) && (lbLogFiles.SelectedItem is object);
            e.CanExecute = (isNewRunMode || isRunLogMode);
        }

        private async Task FirstRun()
        {
            try
            {
                Mouse.OverrideCursor = Cursors.Wait;

                // attempt to restore event stack arguments from a previous session
                var taskFolderPath = Path.Combine(TustlerServicesLib.ApplicationSettings.FileCachePath, this.TaskSpecifier.TaskName);
                if (Directory.Exists(taskFolderPath))
                {
                    var serializedDataPath = Path.Combine(taskFolderPath, EventStackArgumentRestoreName);
                    if (File.Exists(serializedDataPath))
                    {
                        var options = new JsonDocumentOptions
                        {
                            AllowTrailingCommas = true
                        };

                        using var stream = File.OpenRead(serializedDataPath);
                        using JsonDocument document = JsonDocument.Parse(stream, options);
                        var taskEvents = Serialization.DeserializeEventsFromJSON(document);
                        agent.AddEvents(taskEvents);

                        //// create a new JsonDocument containing an array of descriptions for each SetArgument
                        //using var ms = new MemoryStream();
                        //using var writer = new Utf8JsonWriter(ms, new JsonWriterOptions { Indented = false });
                        //writer.WriteStartArray();
                        //foreach (var evt in taskEvents)
                        //{
                        //    if (evt is TaskEvent.SetArgument arg)
                        //    {
                        //        if (arg.Item is TaskResponse.SetArgument response)
                        //        {
                        //            writer.WriteStringValue(response.Item.Description());
                        //        }
                        //    }
                        //}
                        //writer.WriteEndArray();
                        //writer.Flush();
                        //ms.Seek(0L, SeekOrigin.Begin);
                        //var jsonDocument = JsonDocument.Parse(ms);  // UTF8Encoding.UTF8.GetString(ms.ToArray());
                        //taskResponses.Add(new ResponseWrapper(this, jsonDocument));

                    }
                }
                else
                {
                    Directory.CreateDirectory(taskFolderPath);
                }

                lbTaskResponses.ItemsSource = taskResponses;

                async Task StartNew()
                {
                    agent.SetWorkingDirectory(new DirectoryInfo(taskFolderPath));

                    // set a default task identifier
                    agent.SetTaskIdentifier(Guid.NewGuid().ToString());

                    // set the save flags
                    var saveFlags = new SaveFlags(new ISaveFlagSet[]
                    {
                        new StandardFlagSet(new StandardFlagItem[]
                        {
                            StandardFlagItem.SaveTaskName
                        }),
                        new AWSFlagSet(new AWSFlagItem[]
                        {
                            AWSFlagItem.TranscribeSaveJSONTranscript,
                            AWSFlagItem.TranscribeSaveDefaultTranscript,
                            AWSFlagItem.TranslateSaveTranslation
                        })
                    });
                    agent.SetSaveFlags(saveFlags);

                    // set the current task (this is normally set by the agent)
                    var task = new TaskItem(this.TaskSpecifier.ModuleName, this.TaskSpecifier.TaskName, string.Empty);
                    agent.PushTask(task);

                    await CheckQueue().ConfigureAwait(false);
                }

                var logMode = (rbRunLog.IsChecked.HasValue && rbRunLog.IsChecked.Value) && (lbLogFiles.SelectedItem is object);
                if (logMode)
                {
                    if (lbLogFiles.SelectedItem is LogFile selectedLogFile && File.Exists(selectedLogFile.FilePath))
                    {
                        UnLogEvents(selectedLogFile.FilePath);

                        // check the queue for new task function specifiers
                        await CheckQueue().ConfigureAwait(false);
                    }
                    else
                    {
                        await StartNew().ConfigureAwait(false);
                    }
                }
                else
                {
                    await StartNew().ConfigureAwait(false);
                }
            }
            finally
            {
                await Dispatcher.InvokeAsync(() =>
                {
                    Mouse.OverrideCursor = null;
                });
            }
        }

        private async void StartTask_Executed(object sender, ExecutedRoutedEventArgs e)
        {
            // In Stopped mode, a new Agent instance is created and that last log file is run (assuming logging is enabled)

            switch (runMode)
            {
                case RunMode.Init:
                    btnStartTask.Content = "Stop";
                    runMode = RunMode.Running;
                    await FirstRun().ConfigureAwait(false);
                    break;
                case RunMode.Running:
                    runMode = RunMode.Stopped;
                    btnStartTask.Content = "Run Task";
                    if (agent.IsLoggingEnabled)
                    {
                        // log any unlogged events and close the log file in preparation for reopening
                        agent.CloseLog();
                    }
                    else
                    {
                        btnStartTask.IsEnabled = false;         // no log file to restart
                    }
                    break;
                case RunMode.Stopped:
                    if (agent.IsLoggingEnabled)
                    {
                        btnStartTask.Content = "Stop";
                        runMode = RunMode.Running;

                        // MG TODO consider just restarting where it left off rather than reading a log file
                        UnLogEvents(agent.LogFilePath.FullName);
                        await CheckQueue().ConfigureAwait(false);
                    }
                    break;
            }
        }

        private async Task RunTask()
        {
            if (runMode == RunMode.Running)
            {
                // generate an arguments stack (by default an infinite enumerable of Nothing arguments)
                var args = new InfiniteList<MaybeResponse>(MaybeResponse.Nothing);

                agent.PrepareFunctionArguments(args);

                notificationsList.Clear();      // cleared for each function invocation
                var responseStream = TaskFunction(TaskFunctionQueryMode.Invoke, args);

                await agent.RunTask(responseStream).ConfigureAwait(false);

                //if (this.taskLogger.IsLoggingEnabled)
                //{
                //    // update the log file
                //    await LogEventsAsync().ConfigureAwait(false);
                //}

                // Once the previous call to RunTask() has run to completion start the next task (if any)
                await CheckQueue().ConfigureAwait(false);
            }
        }

        private async Task CheckQueue()
        {
            if (taskQueue.Count > 0)
            {
                var nextTaskSpecifier = taskQueue.Dequeue();
                await Dispatcher.InvokeAsync(async () =>
                {
                    this.TaskSpecifier = nextTaskSpecifier;
                    await RunTask().ConfigureAwait(false);
                });
            }
            else
            {
                // the task is either complete OR waiting on a response to be resolved via the UI (e.g. RequestArgument, TaskMultiSelect)
                // if complete then stop logging
                if (!agent.IsAwaitingResponse)
                {
                    //this.taskLogger.StopLogging();
                    await Dispatcher.InvokeAsync(() =>
                    {
                        btnStartTask.Content = "Run Task";
                        btnStartTask.IsEnabled = false;
                    });
                }
            }
        }

        private async void Agent_NewUIResponse(object? sender, TaskResponse response)
        {
            await Dispatcher.InvokeAsync(() =>
            {
                var wrapper = new ResponseWrapper(this, response);
                taskResponses.Add(wrapper);
                lbTaskResponses.ScrollIntoView(wrapper);
            });
        }

        private async void Agent_SaveEvents(object? sender, TaskEvent[] events)
        {
            await Dispatcher.InvokeAsync(() =>
            {
                // by the time this is invoked, the events stack may be in the process of being modified via new incoming responses
                // therefore pass a copy to iterate over
                SaveArgumentsAsJSON(events);
            });
        }

        private void Agent_CallTask(object? sender, TaskItem task)
        {
            // Callback from the current call to agent.RunTask()
            // Note that the current call must run to completion for the system to work correctly (ie the agent must run just one task function at a time)
            // Although calling Dispatcher InvokeAsync will wait until the call has finished, it will also allow multiple subtasks to run simultaneously
            // Instead, just enqueue the next task specifier and run the task later (see RunTask)
            taskQueue.Enqueue(this.taskFunctionLookup[task.FullPath]);      // will throw if task path is unknown
        }

        private async void Agent_ConvertToBinary(object? sender, JsonDocument document)
        {
            await Dispatcher.InvokeAsync(() =>
            {
                var taskEvents = Serialization.DeserializeEventsFromJSON(document);
                var blocks = Serialization.SerializeEventsAsBytes(taskEvents, 0);
                var data = EventLoggingUtilities.BlockArrayToByteArray(blocks);
                agent.AddArgument(TaskResponse.NewSetArgument(new StandardShareIntraModule(StandardArgument.NewSetLogFormatEvents(data))));
            });
        }

        private async void Agent_ConvertToJson(object? sender, byte[] data)
        {
            await Dispatcher.InvokeAsync(() =>
            {
                var blocks = EventLoggingUtilities.ByteArrayToBlockArray(data);
                var taskEvents = Serialization.DeserializeEventsFromBytes(blocks);
                var serializedData = Serialization.SerializeEventsAsJSON(taskEvents);
                agent.AddArgument(TaskResponse.NewSetArgument(new StandardShareIntraModule(StandardArgument.NewSetJsonEvents(serializedData))));
            });
        }

        private async void Agent_Error(object? sender, Notification errorInfo)
        {
            await Dispatcher.InvokeAsync(() =>
            {
                ShowGlobalError(errorInfo);
            });
        }

        private void StartMiniTask_CanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            e.CanExecute = true;
        }

        private void StartMiniTask_Executed(object sender, ExecutedRoutedEventArgs e)
        {
            static T? CastAsInterface<T>(MiniTasks.MiniTaskContext? context) where T : class
            {
                return context switch
                {
                    MiniTasks.MiniTaskContext bucketItemViewModel => bucketItemViewModel.Item as T,
                    _ => null
                };
            }

            /// Add to local notifications list (and spill-over any additional notifications to the global notifications list)
            static void RouteNotifications(NotificationsList sourceNotifications, NotificationsList? sinkNotifications, INotifiableViewModel<Notification>? notifiableInterface)
            {
                if (sourceNotifications.Notifications.Count > 0)
                {
                    var collection = sourceNotifications.Notifications;
                    notifiableInterface?.NotificationsList.Add(collection.First());

                    if (collection.Count > 1)
                    {
                        // show any additional notifications in the main window notifications area
                        foreach (var notification in collection)
                        {
                            sinkNotifications?.Add(notification);
                        }
                    }
                }
            }

            static MiniTasks.MiniTaskContext? GetContext(object eventSource)
            {
                static MiniTasks.MiniTaskContext? GetResponseContext(ResponseWrapper? wrapper)
                {
                    if (wrapper is object)
                    {
                        var response = wrapper.TaskResponse;
                        var showValue = response switch
                        {
                            TaskResponse.ShowValue argResponse => argResponse.Item,
                            _ => throw new ArgumentException($"Unexpected TaskResponse {response}; expected a ShowValue IShowValue response")
                        };

                        if (showValue is AWSShowIntraModule)
                        {
                            var awsShowIntraModule = showValue as AWSShowIntraModule;
                            return awsShowIntraModule?.Argument switch
                            {
                                AWSDisplayValue.DisplayBucketItemsModel bucketItemsModel => MiniTasks.MiniTaskContext.NewBucketItemsModel(bucketItemsModel.Item),
                                _ => null
                            };
                        }
                        else
                        {
                            throw new ArgumentException($"Unexpected TaskResponse {response}; expected a ShowValue AWSShowIntraModule response");
                        }
                    }
                    else
                    {
                        throw new ArgumentException("Response wrapper is null; check the data context of this mini task.");
                    }
                }
                return eventSource switch
                {
                    S3ItemManagement itemManagement => GetResponseContext(itemManagement.DataContext as ResponseWrapper),
                    S3BucketSelector bucketSelector => GetResponseContext(bucketSelector.DataContext as ResponseWrapper),
                    _ => throw new ArgumentException($"StartMiniTask: Unknown data context")
                };
            }

            void RunDeleteMiniTask(MiniTasks.MiniTaskContext? dataContext, AWSMiniTasks.MiniTaskArguments parameterInfo)
            {
                // create a new notifications list for each operation
                var (notifications, success, key) = AWSMiniTasks.Delete(awsInterface, new NotificationsList(), dataContext, parameterInfo.TaskArguments.ToArray());
                if (success)
                {
                    // deletion from the remote source was successful; now delete from the local view model
                    var deleteItemInterface = CastAsInterface<IDeletableViewModelItem>(dataContext);
                    deleteItemInterface?.DeleteItem(key);
                }

                // add to notifications
                var notifiableInterface = CastAsInterface<INotifiableViewModel<Notification>>(dataContext);
                var applicationNotifications = this.FindResource("applicationNotifications") as NotificationsList;
                RouteNotifications(notifications, applicationNotifications, notifiableInterface);
            }

            void RunDownloadMiniTask(MiniTasks.MiniTaskContext? dataContext, AWSMiniTasks.MiniTaskArguments parameterInfo)
            {
                var (notifications, success, _, _) = AWSMiniTasks.Download(awsInterface, new NotificationsList(), dataContext, parameterInfo.TaskArguments.ToArray());
                if (success)
                {
                    // add to notifications
                    var notifiableInterface = CastAsInterface<INotifiableViewModel<Notification>>(dataContext);
                    var applicationNotifications = this.FindResource("applicationNotifications") as NotificationsList;
                    RouteNotifications(notifications, applicationNotifications, notifiableInterface);
                }
            }

            var parameterInfo = e.Parameter as AWSMiniTasks.MiniTaskArguments;

            switch (parameterInfo?.Mode.Tag)
            {
                case MiniTasks.MiniTaskMode.Tags.Delete:
                    RunDeleteMiniTask(GetContext(e.OriginalSource), parameterInfo);
                    break;
                case MiniTasks.MiniTaskMode.Tags.Download:
                    RunDownloadMiniTask(GetContext(e.OriginalSource), parameterInfo);
                    break;
                default:
                    throw new ArgumentException($"StartMiniTask_Executed: unknown mode for parameterInfo");
            }
        }

        private void UIResponse_CanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            e.CanExecute = true;
        }

        private async void UIResponse_Executed(object sender, ExecutedRoutedEventArgs e)
        {
            async Task RunUIResponseSelectTaskAsync(UITaskArguments parameterInfo)
            {
                if (e.OriginalSource is ChooseTask ctrl)
                {
                    ctrl.IsButtonEnabled = false;
                }

                switch (parameterInfo.TaskArguments.First())
                {
                    case UITaskArgument.SelectedTask taskArg:
                        var task = taskArg.Item;
                        agent.PushTask(task);
                        break;
                }

                await Dispatcher.InvokeAsync(async () =>
                {
                    await CheckQueue().ConfigureAwait(false);
                });
            }

            /// A UI component has been selected that restarts an already completed task e.g. S3FetchItems
            async Task RunUIResponseRestartTaskAsync(UITaskArguments parameterInfo)
            {
                // the user has selected an item that sets an argument
                // first check if the task is complete
                var hasCompleted = agent.HasFunctionCompleted();

                if (hasCompleted)
                {
                    // how many responses ago was the last TaskSelect?:
                    //  pare back a copy of the responses collection to the last TaskSelect
                    var tempStack = new Stack<TaskResponse>(taskResponses.Select(wrapper => wrapper.TaskResponse));
                    TaskResponse? lastResponse = null;
                    while (!tempStack.Peek().IsTaskSelect)
                    {
                        lastResponse = tempStack.Pop();
                    }

                    if (lastResponse is object)
                    {
                        // re-add the last response (immediately after the TaskSelect)
                        tempStack.Push(lastResponse);

                        // clear and reinitialize the arguments on the events stack (common arguments) before adding SetArgument below
                        //var commonArgs = moduleLookup[TaskSpecifier.ModuleName];
                        agent.NewSelection(lastResponse);
                    }

                    // clearing the ObservableCollection will disconnect the data bindings (the DataContext on the ItemsControl item containers)
                    // instead, just remove the last numItems items
                    var numItems = taskResponses.Count - tempStack.Count;
                    for (int i = 0; i < numItems; i++)
                    {
                        taskResponses.RemoveAt(taskResponses.Count - 1);
                    }

                    // reset the current task (pushes the current task on the queue)
                    var task = new TaskItem(this.TaskSpecifier.ModuleName, this.TaskSpecifier.TaskName, string.Empty);
                    agent.PushTask(task);
                }

                // Add a SetArgument event to the events list and reinvoke the function
                switch (parameterInfo.TaskArguments.First())
                {
                    case UITaskArgument.Bucket bucketArg:
                        var bucket = bucketArg.Item;
                        agent.AddArgument(TaskResponse.NewSetArgument(new AWSShareIntraModule(AWSArgument.NewSetBucket(bucket))));
                        break;
                }

                if (hasCompleted)
                {
                    // current task has been reset (pushes the current task on the queue)
                    await CheckQueue().ConfigureAwait(false);
                }
                else
                {
                    // current task not yet complete
                    await Dispatcher.InvokeAsync(async () =>
                    {
                        await RunTask().ConfigureAwait(false);
                    });
                }
            }

            async Task RunUIResponseSetArgumentAsync(UITaskArguments parameterInfo)
            {
                // disable the Continue button and restart the task
                switch (e.OriginalSource)
                {
                    case RequestFileMediaReference ctrl:
                        ctrl.IsButtonEnabled = false;
                        break;
                    case RequestS3MediaReference ctrl:
                        ctrl.IsButtonEnabled = false;
                        break;
                    case RequestS3Bucket ctrl:
                        ctrl.IsButtonEnabled = false;
                        break;
                    case RequestLanguageCode ctrl:
                        ctrl.IsButtonEnabled = false;
                        break;
                    case RequestTranscriptionDefaultTranscript ctrl:
                        ctrl.IsButtonEnabled = false;
                        break;
                    case RequestVocabularyName ctrl:
                        ctrl.IsButtonEnabled = false;
                        break;
                    case RequestTranslationTargetLanguages ctrl:
                        ctrl.IsButtonEnabled = false;
                        break;
                    case RequestTranslationTerminologyNames ctrl:
                        ctrl.IsButtonEnabled = false;
                        break;
                    case RequestFilePath ctrl:
                        ctrl.IsButtonEnabled = false;
                        break;
                }

                // Add a SetArgument event to the events list and reinvoke the function
                switch (parameterInfo.TaskArguments.First())
                {
                    case UITaskArgument.Bucket bucketArg:
                        var bucket = bucketArg.Item;
                        agent.AddArgument(TaskResponse.NewSetArgument(new AWSShareIntraModule(AWSArgument.NewSetBucket(bucket))));
                        break;
                    case UITaskArgument.FileMediaReference mediaReferenceArg:
                        var mediaReference = mediaReferenceArg.Item;
                        agent.AddArgument(TaskResponse.NewSetArgument(new AWSShareIntraModule(AWSArgument.NewSetFileMediaReference(mediaReference))));
                        break;
                    case UITaskArgument.TranscriptionLanguageCode transcriptionLanguageCodeArg:
                        var transcriptionLanguageCode = transcriptionLanguageCodeArg.Item;
                        agent.AddArgument(TaskResponse.NewSetArgument(new AWSShareIntraModule(AWSArgument.NewSetTranscriptionLanguageCode(transcriptionLanguageCode))));
                        break;
                    case UITaskArgument.TranscriptionDefaultTranscript transcriptionDefaultTranscriptArg:
                        var transcriptionDefaultTranscript = transcriptionDefaultTranscriptArg.Item;
                        agent.AddArgument(TaskResponse.NewSetArgument(new AWSShareIntraModule(AWSArgument.NewSetTranscriptionDefaultTranscript(transcriptionDefaultTranscript))));
                        break;
                    case UITaskArgument.TranslationLanguageCodeSource translationLanguageCodeArg:
                        var translationLanguageCode = translationLanguageCodeArg.Item;
                        agent.AddArgument(TaskResponse.NewSetArgument(new AWSShareIntraModule(AWSArgument.NewSetTranslationLanguageCodeSource(translationLanguageCode))));
                        break;
                    case UITaskArgument.TranscriptionVocabularyName vocabularyNameArg:
                        var vocabularyName = vocabularyNameArg.Item;
                        agent.AddArgument(TaskResponse.NewSetArgument(new AWSShareIntraModule(AWSArgument.NewSetTranscriptionVocabularyName(vocabularyName))));
                        break;
                    case UITaskArgument.TranslationTargetLanguages translationTargetLanguagesArg:
                        var languages = translationTargetLanguagesArg.Item.Select(languageCode => new AWSShareIterationArgument(AWSIterationArgument.NewLanguageCode(languageCode)));
                        var translationTargetLanguages = new AWSIterationStack(Guid.NewGuid(), languages);
                        agent.AddArgument(TaskResponse.NewSetArgument(new AWSShareIntraModule(AWSArgument.NewSetTranslationTargetLanguages(translationTargetLanguages))));
                        break;
                    case UITaskArgument.TranslationTerminologyNames translationTerminologyNamesArg:
                        var translationTerminologyNames = new List<string>(translationTerminologyNamesArg.Item);
                        agent.AddArgument(TaskResponse.NewSetArgument(new AWSShareIntraModule(AWSArgument.NewSetTranslationTerminologyNames(translationTerminologyNames))));
                        break;
                    case UITaskArgument.FilePath filePathArg:
                        var fileInfo = filePathArg.Item1;
                        var extension = filePathArg.Item2;
                        var pickerMode = filePathArg.Item3;
                        var arg = extension switch
                        {
                            "bin" => pickerMode.Tag switch
                            {
                                FilePickerMode.Tags.Open => StandardArgument.NewSetOpenLogFormatFilePath(fileInfo),
                                FilePickerMode.Tags.Save => StandardArgument.NewSetSaveLogFormatFilePath(fileInfo),
                                _ => throw new NotImplementedException(),
                            },
                            "json" => pickerMode.Tag switch
                            {
                                FilePickerMode.Tags.Open => StandardArgument.NewSetOpenJsonFilePath(fileInfo),
                                FilePickerMode.Tags.Save => StandardArgument.NewSetSaveJsonFilePath(fileInfo),
                                _ => throw new NotImplementedException(),
                            },
                            _ => throw new NotImplementedException(),
                        };
                        agent.AddArgument(TaskResponse.NewSetArgument(new StandardShareIntraModule(arg)));
                        break;
                    default:
                        throw new ArgumentException($"RunSelectBucketMiniTask: Unknown argument type");
                }

                await Dispatcher.InvokeAsync(async () =>
                {
                    await RunTask().ConfigureAwait(false);
                });
            }

            async Task RunUIResponseContinueAsync()
            {
                // disable the Continue button and restart the task
                if (e.OriginalSource is TaskContinue ctrl) ctrl.IsButtonEnabled = false;
                await Dispatcher.InvokeAsync(async () =>
                {
                    await RunTask().ConfigureAwait(false);
                });
            }

            async Task RunUIResponseForEachIndependantTaskAsync(UITaskArguments parameterInfo)
            {
                // expecting a single argument (an IEnumerable<TaskItem>)
                var subtasks = parameterInfo.TaskArguments.First() switch
                {
                    UITaskArgument.ForEach args => args.Item.ToArray(),
                    _ => throw new ArgumentException($"Unknown argument type")
                };

                // now that the user has made their selections, push the new tasks on the execution stack
                // this attempts to pop the first task item (if any) and invoke the callback that adds the next task to the queue
                agent.PushTasks(subtasks, ItemOrdering.Independant);

                await Dispatcher.InvokeAsync(async () =>
                {
                    var nextTaskSpecifier = taskQueue.Dequeue();
                    this.TaskSpecifier = nextTaskSpecifier;

                    await RunTask().ConfigureAwait(false);
                });
            }

            var parameterInfo = e.Parameter as UITaskArguments;

            switch (parameterInfo?.Mode.Tag)
            {
                case UITaskMode.Tags.SelectTask:
                    await RunUIResponseSelectTaskAsync(parameterInfo).ConfigureAwait(false);
                    break;
                case UITaskMode.Tags.RestartTask:
                    await RunUIResponseRestartTaskAsync(parameterInfo).ConfigureAwait(false);
                    break;
                case UITaskMode.Tags.SetArgument:
                    await RunUIResponseSetArgumentAsync(parameterInfo).ConfigureAwait(false);
                    break;
                case UITaskMode.Tags.Continue:
                    await RunUIResponseContinueAsync().ConfigureAwait(false);
                    break;
                case UITaskMode.Tags.ForEachIndependantTask:
                    await RunUIResponseForEachIndependantTaskAsync(parameterInfo).ConfigureAwait(false);
                    break;
                default:
                    throw new ArgumentException($"UIResponse_Executed: unknown mode for parameterInfo");
            }
        }

        private void SelectRunMode_CanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            e.CanExecute = true;
        }

        private void SelectRunMode_Executed(object sender, ExecutedRoutedEventArgs e)
        {
            var radioButton = e.OriginalSource as RadioButton;

            lbLogFiles.IsEnabled = (radioButton!.Name == "rbRunLog");
        }
    }

    public static class TaskCommands
    {
        public static readonly RoutedUICommand StartTask = new RoutedUICommand
            (
                "StartTask",
                "StartTask",
                typeof(TaskCommands),
                null
            );

        public static readonly RoutedUICommand StartMiniTask = new RoutedUICommand
            (
                "StartMiniTask",
                "StartMiniTask",
                typeof(TaskCommands),
                null
            );

        public static readonly RoutedUICommand UIResponse = new RoutedUICommand
            (
                "UIResponse",
                "UIResponse",
                typeof(TaskCommands),
                null
            );

        public static readonly RoutedUICommand SelectRunMode = new RoutedUICommand
            (
                "SelectRunMode",
                "SelectRunMode",
                typeof(TaskCommands),
                null
            );
    }
}
